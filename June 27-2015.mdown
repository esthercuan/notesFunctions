# Welcome to week 5 
It has been a great experience to study at GA. 
Before we start I wanted to share a great resource. If you would like a textbook to accompany/review the knowledge we are studying [Eloquent Javascript](http://eloquentjavascript.net/) is a great book! It is free, and one of the best javascript books written. On the website, you can pratice in-book because each example and exercise is going to be a console itself. So use this to practice daily! 


Now let's review some concepts that we have covered. 

Everything is a function, a pipeline for problem solving. The key to successful functions is a clear understanding of data types and what variable holds what type of data. The return value is very important because it is the output of every function. You want to `return` because this allows the function to spit out something that you can use later. 

Lets review the homework: 

	function addTwoNumbers(x,y) { //remember the vocabulary : parameters and arguments. 
	  		return x + y;
		}


	function addTwoNumbersChained () {
			var sum = addTwoNumbers(1,2);
			var anotherSum = sum + addTwoNumbers(3,4);
			return anotherSum; 
	}

	addTwoNumbersChained();
	// the function is doing: 1+2 = 3 and then 3 + (3+4) = 10. 


**If you only initialize a variable and not assign it a value, it will automatically be assigned the `undefined` value.** 

A great way to follow an `if else` statement is to follow your variable's value. `if` and `else` are not mutually exclusive. It means that they are quite independant of each other. 

	function computeMinAge() {
	  var firstAge = 32;
	  var secondAge = 44;
	  var thirdAge = 26;

	  var minAge = 9999; // minAge is 9999

	  if (firstAge < minAge) {
	    minAge = firstAge; // minAge is changed to 32
	  }

	  if (secondAge < minAge) {
	    minAge = secondAge; //minAge is still to 32 because it is smaller than secondAge = 44;
	  }

	  if (thirdAge < minAge) {
	    minAge = thirdAge; //minAge is changed to 26 because thirdAge is smaller than minAge which up till now was 32
	  }
	  
	  console.log(minAge); //returns the current value of minAge which is 26
	}

indexOf is a **Method** that searches a string for a specific substring. For this exercise we should remember that computers like to start counting at **0**. 

	function contains (string,subString){
	if (string.indexOf(subString)== -1){
		return false;
	} else {
		return true;
	}
	}

	function validate (firstName, lastName,email){
		if (firstName==''){
		return false;
	}
		if (lastname ==''){
		return false;
	}
		if (contains(email,'@')==false){
			return false;
		}
		if(contans(email,".")== false){
			return false;
		}

		return true; 
	}


Great software engineering is encapulating code. 


# Arrays 

Data comes from the server. Data usually comes in groups. There has to be a good way to process groups of data. This is where **Arrays** come to play. Lets learn how to process arrays and objects. 

Syntax: 

	var array = [1,2,3];

This is a variable named `array` set to store multiple ordered values. In this case `array` is storing `1,2,3`
With arrays, you can start managing multiple sets of information. Grouping data together in a list is important because it allows you to manipulate it easily. Life without arrays would be absolutely terrible. Imagine having to manipulate data one by one. *yuk face* 

Arrays can have all types of data. If you need a refresher of data types you can view my notes on it [here](https://github.com/esthercuan/programmingNotesJavascript/blob/master/June%2020-2015.mdown). But that list is not limited. You can store many things in arrays, including html tags, objects, functions, etc. 

To go through arrays you also have to understand how the computer goes through arrays. This is where we use **index**. View **index** as a pointing finger that is always a number between 0- and the lentgh of your array. 
So, if we have this array:
	
	var myArray = [1,2,3];

The index number 0 would be 1, index 1 would be 2 and index 2 would be 3. The reason why we start counting from **0** is neatly explained in this [awesome link](http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF) that Jazmin (classmate) showed us. To get the index of an array you would call it like this: 

	var myArray[1];

Would tell you that on *position 1* we have the *number 2.* 
A very useful way to modify arrays is using the method `.length`

This is a method that allows you to manipulate the array through its length. You call it like this: 

	var theLengthOfMyArray = myArray.length; 

So the variable `theLengthOfMyArray` is now 3. 
Ways to play with this: 

	myArray[myArray.length-1]; 

This above statement is calling for the index that is **1 less than the length of the array**. In other words it is referencing the *last index*. In this case the result of `my.Array.length-1` is 3 -1 = 2. The index of 2 points at the number 3 in our myArray. 

Hope this makes sense! Now go take a break. 

Ok so now that we know how to point at arrays by using **index**, we can now modify elements in the array. The way we do it is through **Loops**. 

# Loops 

We want to 'loop' through arrays by using our friend the **index**. 





Thank you everyone for reading my notes! See you next class. If you see any typos or any mistakes please let me know ! or feel free to change it ^^




